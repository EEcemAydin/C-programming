Printfde Satır atlamak için "\n" kullanırız.
 \n --> alt satıra geçer | \t --> tab boşluğu bırakır | \b --> geri siler | \r --> satır başına alır | \a --> alarm çalar | \v --> dikey tab boşluğu bırakır | \f --> form feed | \0 --> null karakter |
Eğer bir printf içinde tirnak kullanmak istiyor isen kullanmak istediğin tirnakları ters slash içine alman gerekir --> printf("Melih Akman \"İyidir\"") --> Melih Akman "İyidir".
Data Types => İnt = Tam sayı , Char = tek bir karakter birden fazla karakter tutcaksam karakter dizisi olur , Float = Ondalıklı sayı , Double = float a göre daha büyük Ondalıklı sayıları tutar.
Datalar ne kadar veri kaplar ve printf de bastırırken ne kullanırız int(4bytes|%d);double(8bytes|%lf);float(4bytes|%f);char(1byte|%c).
Datayı bastırırken printf("%degiskenTürüKısaltması",degiskenAdi)  | Aynı printfde iki değişken printf("%x%x",x1,x2) | Printfde degiskenTürüKısaltması arasına bıraktığımız boşluklar çıktıda da boşluk bırakır.
Değer ataması yaparken virgül ile sıralayabiliriz --> int main x,y,z = 10,m = 5 | 
Float ya da Double da değer basarken noktadan sonra kaç basamak görülmesini şöyle kullanırız --> printf("%.2f") | 
Char verisi 1 harf tutar --> char a = 'A'|
Scanf --> kullanıcıdan veri almaya yarar | scanf("%degiskenTürüKısaltması",&degiskenAdi) --> yapılan işlem bu değişken türünde alınan veriyi bu değişkene kaydet|Scanf de [^\n] 
Sizeof verinin boyutunu basarken kullanırız --> printf("%d",sizeof(int)) |
Bir Verinin önüne const yazar isek bu verinin değerini değiştiremeziz. --> const int x = 10; x = 20; --> Hata verir. |
Eğer veriyi değiştirmiceksen mainin dışında #define ile veriyi tutabilirsiz |
Aritmatik(Arithmetic) Operatörler --> +,-,*,/,% | % --> Mod alma işlemi yani bölümünden kalanı verir. | ++ --> arttırma operatörü | -- --> azaltma operatörü |
Atama(Assignment) Operatörleri --> +=,-=,*=,/=,%= | += --> x = x + 5; | -= --> x = x - 5; | *= --> x = x * 5; | /= --> x = x / 5; | %= --> x = x % 5; |
Karşılaştırma(Comparison) Operatörleri --> ==,!=,>,<,>=,<= | == --> eşit mi | != --> eşit değil mi | > --> büyük mü | < --> küçük mü | >= --> büyük eşit mi | <= --> küçük eşit mi | Eğer karşılaştırma operatörlerinden biri doğruysa 1 yanlışsa 0 döner. |
Mantıksal(Logical) Operatörler --> &&,||,!,^ | && --> ve | || --> veya | ! --> değil | ^ --> xor |
İf else yapısı --> if(kosul){işlem} | else{işlem} | else if (kosul){işlem} | else if kullanmak için if ile başlamam gerekir. |
For döngüsü --> for(başlangıç;bitiş;artış){işlem} | başlangıç değeri verilir sonra bitiş değerine varılana kadar işlem devam eder. |
while döngüsü --> while(kosul){işlem} | kosul doğru olduğu sürece işlem devam eder. | While(1) --> sonsuz döngü |While(0) --> hiç döngü çalışmaz çünkü kosul yanlış |
Do while döngüsü --> do{işlem}while(kosul) | İlk işlem yapılır sonra kosul kontrol edilir. | Program koşula bağlı kalmadan 1 kere çalışmasını istiyorsan do while kullan. |
Break ve continue --> break --> döngüden çıkar | continue --> döngüyü devam ettirir. |
Switch Case yapısı --> switch(degisken){case 1: işlem;break;case 2: işlem;break;default: işlem;break;} | Switch case yapısında break kullanmaz isek tüm case ler çalışır. |
Bool yapısı  --> bool x = true; | true = 1 | false = 0 | printf("%d",x); --> 1 |
Math.h --> ceil --> yukarı yuvarlar | floor --> aşağı yuvarlar | round --> en yakın sayıya yuvarlar | fabs --> mutlak değer | fmod --> mod alma |pow --> üs alma | sqrt --> karekök alma | sin --> sinüs | cos --> kosinüs | tan --> tanjant | asin --> ters sinüs | acos --> ters kosinüs | atan --> ters tanjant | sinh --> hiperbolik sinüs | cosh --> hiperbolik kosinüs | tanh --> hiperbolik tanjant | asinh --> ters hiperbolik sinüs | acosh --> ters hiperbolik kosinüs | atanh --> ters hiperbolik tanjant | exp --> e üzeri x | log --> logaritma | log10 --> 10 tabanında logaritma | log2 --> 2 tabanında logaritma | log1p --> 1 + x | logb --> x in tabanı | fmax --> x ve y arasında büyük olanı verir | fmin --> x ve y arasında küçük olanı verir | fma --> x * y + z | frexp --> x in mantissa ve exponent değerlerini verir | ldexp --> x in mantissa değerini 2 nin exponent kuvveti ile çarpar | modf --> x in tam ve kesirli kısmını verir | exp2 --> 2 nin x kuvvetini verir | expm1 --> e üzeri x - 1 | ilogb --> x in exponent değerini verir | scalbn --> x in mantissa değerini 2 nin n kuvveti ile çarpar | scalbln --> x in mantissa değerini 2 nin n kuvveti ile çarpar | cbrt --> küp kök alma | hypot --> x ve y nin hipotenüsünü verir | j0 --> bessel fonksiyonu | j1 --> bessel fonksiyonu | jn --> bessel fonksiyonu | y0 --> bessel fonksiyonu | y1 --> bessel fonksiyonu | yn --> bessel
Cast kullanımı --> (int) 5.5; --> 5 | (float) 5; --> 5.000000 | (char) 65; --> A | (int) 'A'; --> 65 | (float) 'A'; --> 65.000000 | (char) 65.000000; --> A | (int) 5.5; --> 5 | (float) 5; --> 5.000000 | (char) 65; --> A | (int) 'A'; --> 65 | (float) 'A'; --> 65.000000 | (char) 65.000000; --> A | 
ASCİ tablosu --> 0 --> 48 | 1 --> 49 | 2 --> 50 | 3 --> 51 | 4 --> 52 | 5 --> 53 | 6 --> 54 | 7 --> 55 | 8 --> 56 | 9 --> 57 | A --> 65 | B --> 66 | C --> 67 | D --> 68 | E --> 69 | F --> 70 | G --> 71 | H --> 72 | I --> 73 | J --> 74 | K --> 75 | L --> 76 | M --> 77 | N --> 78 | O --> 79 | P --> 80 | Q --> 81 | R --> 82 | S --> 83 | T --> 84 | U --> 85 | V --> 86 | W --> 87 | X --> 88 | Y --> 89 | Z --> 90 | a --> 97 | b --> 98 | c --> 99 | d --> 100 | e --> 101 | f --> 102 | g --> 103 | h --> 104 | i --> 105 | j --> 106 | k --> 107 | l --> 108 | m --> 109 | n --> 110 | o --> 111 | p --> 112 | q --> 113 | r --> 114 | s --> 115 | t --> 116 | u --> 117 | v --> 118 | w --> 119 | x --> 120 | y --> 121 | z --> 122 |ASCİ kullanımı --> (int) 'A'; --> 65 | (char) 65; --> A | (int) 'a'; --> 97 | (char) 97; --> a | (int) '0'; --> 48 | (char) 48; --> 0 | (int) ' '; --> 32 | (char) 32; --> boşluk |
Diziler --> int dizi[5]; | dizi[0] = 1; | dizi[1] = 2; | dizi[2] = 3; | dizi[3] = 4; | dizi[4] = 5; | int dizi[5] = {1,2,3,4,5}; | int dizi[5] = {1,2,3}; | int dizi[5] = {0}; | int dizi[5] = {1,2,3,4,5,6}; --> hata verir | 
Dizilerde döngü --> for(int i = 0; i < 5; i++){printf("%d",dizi[i]);} |
Dizi elemanlarını değiştrme --> dizi[0] = 10; | dizi[1] = 20; | dizi[2] = 30; | dizi[3] = 40; | dizi[4] = 50; | Dizi[2] = 60; | Artık dizi de 2. eleman 60 olmuş olur. |
ÇOK BOYUTLU DİZİLERİ TEKRAR ET 
String.h --> strlen --> stringin uzunluğunu verir | strcpy --> stringi kopyalar | strcat --> stringleri birleştirir | strcmp --> stringleri karşılaştırır | strchr --> string içinde karakter arar | strstr --> string içinde string arar | strupr --> stringi büyük harfe çevirir | strlwr --> stringi küçük harfe çevirir | strrev --> stringi ters çevirir | strset --> stringi karakter ile doldurur | strnset --> stringin ilk n karakterini karakter ile doldurur | strpbrk --> string içinde karakterlerden birini arar | strspn --> stringin başından karakterlerden birini bulana kadar uzunluğu | strcspn --> stringin başından karakterlerden birini bulana kadar uzunluğu | strtok --> stringi parçalar | sprintf --> stringe yazdırır | sscanf --> stringden okur | 
Strlen ile okuma yaparken sadece gerçek stringin uzunluğunu alır. |sizeof ile okuma yaparken \0 karakterini de alır. |
Strcmp iki stringi karşılaştırır. | Eğer stringler aynı ise 0 döndürür. | Eğer stringler aynı değil ise 0 döndürmez. | ASCI ye göre karşılaştırır. | Kullanımı --> strcmp(string1,string2); |
Strncmp de belli bir karakter sayısını karşılaştırır. | Kullanımı --> strncmp(string1,string2,3); | Bu örnekte ilk 3 karakteri karşılaştırır. |
Strcpy stringi kopyalar. | Kullanımı --> strcpy(string1,string2); | Bu örnekte string2 yi string1 e kopyalar. |
Strncpy de belli bir karakter sayısını kopyalar. | Kullanımı --> strncpy(string1,string2,3); | Bu örnekte ilk 3 karakteri kopyalar. |Strncpy kullanırken hata vermemesi için diziye boş karakter atamak gerekir. |
Strcat stringleri birleştirir. | Kullanımı --> strcat(string1,string2); | Bu örnekte string2 yi string1 e ekler. |
Strncat de belli bir karakter sayısını birleştirir. | Kullanımı --> strncat(string1,string2,3); | Bu örnekte ilk 3 karakteri birleştirir. |
Strchr string içinde karakter arar. | Kullanımı --> strchr(string1,'A'); | Bu örnekte string1 içinde A karakterini arar. | Eğer bulursa karakterin adresini döndürür. | Eğer bulamazsa NULL döndürür. |
Fgets kullanımı --> char string[100]; | fgets(string,100,stdin); | Bu örnekte kullanıcıdan 100 karakterlik bir string alır. |
Strrev stringi ters çevirir. | Kullanımı --> strrev(string1); | Bu örnekte string1 i ters çevirir. |Yani char i = "Melih" --> i = "hileM" olur. |
Strlwr stringi küçük harfe çevirir. | Kullanımı --> strlwr(string1); | Bu örnekte string1 i küçük harfe çevirir. |
Strupr stringi büyük harfe çevirir. | Kullanımı --> strupr(string1); | Bu örnekte string1 i büyük harfe çevirir. |
Strstr string içinde string arar. | Kullanımı --> strstr(string1,string2); | Bu örnekte string1 içinde string2 yi arar. | Eğer bulursa string2 nin adresini döndürür. | Eğer bulamazsa NULL döndürür. |
Macro object-like macros #define pi = 3.14| function-like macros #define topla(x,y) (x+y) |Predefined macros __date__ __time__ __FILE__ __LINE__ __STDC__ |date --> tarih |time --> saat |FILE --> dosya adı |LINE --> satır numarası |STDC --> standart C |
Random sayı ürettirmek rand() | sürekli değişmesi için srand(time(0))|
Pointer & --> adresini verir | * --> değerini verir | 
Fonksiyonda pointer kullanımı --> void fonksiyon(int *p){*p = 10;} | int main(){int a = 5; | fonksiyon(&a); | printf("%d",a);} | Bu örnekte fonksiyon içindeki *p = 10; a = 10 olur. |
Pointer int *tab= int tab[] | for içinde şöyle bir kullanım var for(pt=tab;pt<tab+5;pt++) | *pt=0; dizinin bütün elemanları 0 a eşitlenir. | 
for içinde koşul kısmında  şöyle bir kullanım var for(p2=cümlem;*p2;p2++) | bu kullanımda *p2 koşul kısmında NULL dan farklı olduğu sürece döngü devam eder. |
va_arg --> argümanları alır | va_start --> argümanları başlatır | va_end --> argümanları bitirir | va_start kullanımı --> va_start(ap,ilk_argüman); | Fonksiyonlarda kullanılır | ilk_argüman fonksiyonun ilk argümanıdır. | va_arg kullanımı --> int topla(va_list ap){int toplam = 0; | int argüman; | while(argüman = va_arg(ap,int)) | toplam += argüman; | va_end(ap); | return toplam;} | int main(){printf("%d",topla(1,2,3,4,5,6,7,8,9,10));} | Bu örnekte topla fonksiyonu 1 den 10 a kadar olan sayıları toplar. |
fgetc --> dosyadan karakter okur | fputc --> dosyaya karakter yazar | fgets --> dosyadan string okur | fputs --> dosyaya string yazar | fgetws --> dosyadan string okur | fputws --> dosyaya string yazar | fgetpos --> dosyanın konumunu alır | fsetpos --> dosyanın konumunu ayarlar | fseek --> dosyanın konumunu ayarlar | ftell --> dosyanın konumunu alır | rewind --> dosyanın konumunu başa alır | feof --> dosyanın sonuna gelip gelmediğini kontrol eder | ferror --> dosyada hata olup olmadığını kontrol eder |
fscanf --> dosyadan okuma yapar | fscanf kullanımı --> int main(){FILE *dosya; | dosya = fopen("dosya.txt","r"); | int a,b,c; | fscanf(dosya,"%d %d %d",&a,&b,&c); | printf("%d %d %d",a,b,c);} | Bu örnekte dosya.txt dosyasından okuma yapar. |